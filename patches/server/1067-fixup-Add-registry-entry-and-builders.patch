From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lulu13022002 <41980282+Lulu13022002@users.noreply.github.com>
Date: Tue, 24 Sep 2024 13:19:57 +0200
Subject: [PATCH] fixup! Add registry entry and builders


diff --git a/src/test/java/io/papermc/paper/registry/RegistryBuilderTest.java b/src/test/java/io/papermc/paper/registry/RegistryBuilderTest.java
index 4d4632da6bf1bde85115dde2e2f7e353bd392176..7b6d7dcd297a1cf9f57742be77cb6c5e902c2db9 100644
--- a/src/test/java/io/papermc/paper/registry/RegistryBuilderTest.java
+++ b/src/test/java/io/papermc/paper/registry/RegistryBuilderTest.java
@@ -1,42 +1,43 @@
 package io.papermc.paper.registry;
 
-import io.papermc.paper.registry.data.PaperEnchantmentRegistryEntry;
-import io.papermc.paper.registry.data.PaperGameEventRegistryEntry;
 import io.papermc.paper.registry.data.util.Conversions;
-import java.util.List;
 import java.util.Map;
+import java.util.stream.Stream;
+import io.papermc.paper.registry.entry.RegistryEntry;
+import io.papermc.paper.registry.entry.RegistryEntryInfo;
+import io.papermc.paper.registry.legacy.DelayedRegistryEntry;
 import net.minecraft.core.Registry;
-import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.RegistryOps;
 import net.minecraft.resources.ResourceKey;
-import net.minecraft.world.item.enchantment.Enchantment;
-import net.minecraft.world.level.gameevent.GameEvent;
 import org.bukkit.support.RegistryHelper;
 import org.bukkit.support.environment.AllFeatures;
-import org.junit.jupiter.api.Disabled;
+import org.bukkit.Keyed;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.params.provider.Arguments.arguments;
 
 @AllFeatures
 class RegistryBuilderTest {
 
-    static List<Arguments> registries() {
-        return List.of(
-            arguments(Registries.ENCHANTMENT, (PaperRegistryBuilder.Filler<Enchantment, org.bukkit.enchantments.Enchantment, PaperEnchantmentRegistryEntry.PaperBuilder>) PaperEnchantmentRegistryEntry.PaperBuilder::new),
-            arguments(Registries.GAME_EVENT, (PaperRegistryBuilder.Filler<GameEvent, org.bukkit.GameEvent, PaperGameEventRegistryEntry.PaperBuilder>) PaperGameEventRegistryEntry.PaperBuilder::new)
-        );
+    static Stream<Arguments> registries() {
+        return PaperRegistries.REGISTRY_ENTRIES.stream()
+            .map(RegistryBuilderTest::possiblyUnwrap)
+            .filter(RegistryEntry.BuilderHolder.class::isInstance)
+            .map(Arguments::arguments);
+    }
+
+    private static <M, B extends Keyed> RegistryEntryInfo<M, B> possiblyUnwrap(final RegistryEntryInfo<M, B> entry) {
+        return entry instanceof final DelayedRegistryEntry<M, B> delayed ? delayed.delegate() : entry;
     }
 
     @ParameterizedTest
     @MethodSource("registries")
-    <M, T> void testEquality(final ResourceKey<? extends Registry<M>> resourceKey, final PaperRegistryBuilder.Filler<M, T, ?> filler) {
-        final Registry<M> registry = RegistryHelper.getRegistry().lookupOrThrow(resourceKey);
+    <M, T> void testEquality(final RegistryEntry.BuilderHolder<M, T, ?> registryEntry) {
+        final Registry<M> registry = RegistryHelper.getRegistry().lookupOrThrow(registryEntry.mcKey());
         for (final Map.Entry<ResourceKey<M>, M> entry : registry.entrySet()) {
-            final M built = filler.fill(new Conversions(new RegistryOps.HolderLookupAdapter(RegistryHelper.getRegistry())), PaperRegistries.fromNms(entry.getKey()), entry.getValue()).build();
+            final M built = registryEntry.fillBuilder(new Conversions(new RegistryOps.HolderLookupAdapter(RegistryHelper.getRegistry())), PaperRegistries.fromNms(entry.getKey()), entry.getValue()).build();
             assertEquals(entry.getValue(), built);
         }
     }
